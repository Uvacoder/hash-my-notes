// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "secrets_database",
    columns: [
      { name: "protected", type: "bool", notNull: true, defaultValue: "false" },
      { name: "visits", type: "int", notNull: true, defaultValue: "0" },
      { name: "secret", type: "text" },
      { name: "password", type: "text" },
      { name: "validity", type: "int", notNull: true, defaultValue: "99999" },
    ],
  },
  {
    name: "expired_secrets_alias",
    columns: [{ name: "alias", type: "string" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type SecretsDatabase = InferredTypes["secrets_database"];
export type SecretsDatabaseRecord = SecretsDatabase & XataRecord;

export type ExpiredSecretsAlias = InferredTypes["expired_secrets_alias"];
export type ExpiredSecretsAliasRecord = ExpiredSecretsAlias & XataRecord;

export type DatabaseSchema = {
  secrets_database: SecretsDatabaseRecord;
  expired_secrets_alias: ExpiredSecretsAliasRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Ishaan-Bedi-s-workspace-tbb9k6.us-east-1.xata.sh/db/secrets",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
